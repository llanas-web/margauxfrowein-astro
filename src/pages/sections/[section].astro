---
import type { GetStaticPaths } from "astro";
import SectionLayout from "../../layouts/section-layout.astro";
import SectionHeader from "../../components/section/section-header.astro";
import ModalPhotos from "../../components/section/modal/modal-photos.astro";
import { useStrapi } from "../../api/strapi";
import { getImageUrlFromFormat } from "../../lib/strapi-utils";
import SectionPhotos from "../../components/section/section-photos.astro";
import SectionPhotoItem from "../../components/section/section-photo-item.astro";

export const getStaticPaths = (async () => {
  const { getSectionsUrl } = useStrapi();
  const sectionsUrl = await getSectionsUrl();
  return sectionsUrl.map((url) => ({
    params: { section: url },
  }));
}) satisfies GetStaticPaths;

const { section } = Astro.params;

const [{ attributes }] = await useStrapi().getSectionDetails(section);
const {
  title,
  photos,
  cover,
  description,
  seo_title,
  seo_description,
  thumbnail,
} = attributes;
---

<script>
  import Swiper from "swiper/bundle";
  import "swiper/css/bundle";

  const swiper = new Swiper(".modal-swiper", {
    lazyPreloaderClass: "swiper-lazy-preloader",
    spaceBetween: 30,
    navigation: {
      nextEl: ".swiper-button-next",
      prevEl: ".swiper-button-prev",
    },
  });

  const sectionItems = document.querySelectorAll(".section-item");
  sectionItems.forEach((elem, index) =>
    elem.addEventListener("click", () => {
      document.getElementById("section-modal")?.classList.remove("hidden");
      swiper.slideTo(index);
    })
  );

  const closingModal = document.querySelector("#section-modal__closing");
  closingModal?.addEventListener("click", () => {
    document.getElementById("section-modal")?.classList.add("hidden");
  });
</script>

<SectionLayout
  title={title}
  thumbnail={getImageUrlFromFormat(thumbnail.data.attributes, "thumbnail")}
  description={description}
  seo_title={seo_title}
  seo_description={seo_description}
>
  <article class="section">
    <SectionHeader
      title={title}
      cover={cover.data.attributes}
      description={description}
    />
    <SectionPhotos>
      {photos.data.map((photo: any) => <SectionPhotoItem photo={photo} />)}
    </SectionPhotos>
  </article>
  <ModalPhotos photos={photos} />
</SectionLayout>

<style>
  .section {
    perspective: 10px;
    height: 100vh;
    overflow-y: auto;
    overflow-x: hidden;
  }
</style>
