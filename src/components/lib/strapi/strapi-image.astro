---
import {
  getImageUrlFromFormat,
  type imageFormatSizes,
} from "../../../lib/strapi-utils";
interface Props {
  image: any;
  description: string;
  classNames: string;
  format: imageFormatSizes;
  loading?: "eager" | "lazy" | null | undefined;
  hasPlaceholder?: boolean;
}

const {
  image,
  description,
  format,
  classNames,
  loading = null,
  hasPlaceholder = true,
} = Astro.props;

const imageUrl = getImageUrlFromFormat(image, format);
const imagePlaceholderUrl = hasPlaceholder
  ? getImageUrlFromFormat(image, "thumbnail")
  : null;
const width = format === "original" ? image.width : image.formats[format].width;
const height =
  format === "original" ? image.height : image.formats[format].height;
---

<script>
  const images = document.querySelectorAll(".strapi-image");
  images.forEach((elem) => {
    const image = elem.querySelector<HTMLImageElement>(".strapi-image__real");
    const placeholder = elem.querySelector(".strapi-image__placeholder");

    if (!image || !placeholder) return;

    const displayImage = () => {
      placeholder?.classList.add("opacity-0");
    };

    if (image.complete) {
      displayImage();
    } else {
      image.addEventListener("load", () => {
        setTimeout(displayImage, 200);
      });
    }
  });
</script>

<div class="strapi-image relative h-full w-full">
  <img
    class={`strapi-image__real absolute top-0 left-0 w-full h-full ${classNames}`}
    src={imageUrl}
    alt={description}
    loading={loading}
  />
  {
    hasPlaceholder ? (
      <img
        class={`strapi-image__placeholder absolute top-0 left-0 w-full h-full blur-sm transition-opacity ease-out duration-500 ${classNames}`}
        src={imagePlaceholderUrl}
        alt={description}
        width={width}
        height={height}
      />
    ) : null
  }
</div>

<style>
  .perspective {
    transform: perspective(900px) rotateY(-17deg) rotateZ(1deg) rotateX(8deg);
  }
</style>
